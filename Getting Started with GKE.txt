 # Google Cloud Fundamentals: Getting Started with GKE
 
### Objectives

 In this lab, you learn how to perform the following tasks:
 - Provision a Kubernetes cluster using Kubernetes Engine.
 - Deploy and manage Docker containers using kubectl.
 
 
  ## Task 1:  Sign in to the Google Cloud Platform (GCP) Console/ SDK

		gcloud init
		gcloud config set account [ACCOUNT]
		gcloud config set project [PROJECT_ID]
    
  1 Make sure you signed into Qwiklabs using an incognito window.
  
  2 Note the lab's access time
  
  3 When ready, click [start_lab]
  
  4 Note your lab credentials. You will use them to sign in to Cloud Platform Console.
  
  5 Click Open Google Console.
  
  6 Click Use another account and copy/paste credentials for this lab into the prompts.
  
  7 Accept the terms and skip the recovery resource page.
  
  
  ## Task 2: Confirm that needed APIs are enabled
  
  1 Make a note of the name of your GCP project. This value is shown in the top bar of the Google Cloud Platform Console. It will be of the form qwiklabs-gcp- followed by hexadecimal numbers.
  
  2 In the GCP Console, on the Navigation menu, click APIs & Services
  
  3 Scroll down in the list of enabled APIs, and confirm that both of these APIs are enabled:
  
  - Kubernetes Engine API
  - Container Registry API
  
		gcloud services list --enabled
		gcloud services enable kubernetes-engine-api container-registry-api
  
  
  ## Task 3: Start a Kubernetes Engine cluster
  
  1 In GCP console, on the top right toolbar, click the Open Cloud Shell button
  
  2 Click Continue
  
  3 For convenience, place the zone that Qwiklabs assigned you to into an environment variable called MY_ZONE. At the Cloud Shell prompt, type this partial command:
  
		export MY_ZONE=us-central1-a
  
  4 Start a Kubernetes cluster managed by Kubernetes Engine. Name the cluster webfrontend and configure it to run 2 nodes:
  
		gcloud container clusters create webfrontend --zone $MY_ZONE --num-nodes 2
  
  5 After the cluster is created, check your installed version of Kubernetes using the kubectl version command:
  
		kubectl version
  
  6 View your running nodes in the GCP Console. On the Navigation menu, click Compute Engine > VM Instances.
  
		gcloud compute instances list
  
  
  ## Task 4: Run and deploy a container
  
  1 From your Cloud Shell prompt, launch a single instance of the nginx container. (Nginx is a popular web server.)
  
		kubectl create deploy nginx --image=nginx:1.17.10
  
  2 View the pod running the nginx container:
  
		kubectl get pods
  
  3 Expose the nginx container to the Internet:
  
		kubectl expose deployment nginx --port 80 --type LoadBalancer
  
  4 View the new service:
  
		kubectl get services
  
  5 Open a new web browser tab and paste your cluster's external IP address into the address bar. The default home page of the Nginx browser is displayed.
  
  6 Scale up the number of pods running on your service:
  
		kubectl scale deployment nginx --replicas 3
  
  7 Confirm that Kubernetes has updated the number of pods:
  
		kubectl get pods
  
  8 Confirm that your external IP address has not changed:
  
		kubectl get services
  
  9 Return to the web browser tab in which you viewed your cluster's external IP address. Refresh the page to confirm that the nginx web server is still responding.
  
  
 # Congratulations!
